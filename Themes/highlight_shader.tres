[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://bhq4rvvhxrvox"]

[sub_resource type="Shader" id="Shader_xnf2y"]
code = "shader_type canvas_item;
render_mode blend_premul_alpha;

uniform bool active = false;
uniform float Line_Smoothness : hint_range(0, 0.1) = 0.045;
uniform float Line_Width : hint_range(0, 0.2) = 0.09;
uniform float Brightness = 3.0;
uniform float Rotation_deg : hint_range(-90, 90) = 30;
uniform float Distortion : hint_range(1, 2) = 1.8;
uniform float Speed = 0.7;
uniform float Position : hint_range(0, 1) = 0;
uniform float Position_Min = 0.25;
uniform float Position_Max = 0.5;
uniform float Alpha : hint_range(0, 1) = 1;
uniform sampler2D surface: source_color;
uniform float Start_Time = 0.0;  // Custom uniform to track start time

vec2 rotate_uv(vec2 uv, vec2 center, float rotation, bool use_degrees){
		float _angle = rotation;
		if(use_degrees){
			_angle = rotation * (3.1415926/180.0);
		}
		mat2 _rotation = mat2(
			vec2(cos(_angle), -sin(_angle)),
			vec2(sin(_angle), cos(_angle))
		);
		vec2 _delta = uv - center;
		_delta = _rotation * _delta;
		return _delta + center;
	}

void fragment() {
	// Only run the effect if active is true
	//COLOR = texture(TEXTURE, UV);  // Default to just the texture if not active
	if (!active)
		COLOR.rgba = vec4(0, 0, 0, 0);
	else {
		vec2 center_uv = UV - vec2(0.5, 0.5);
		float gradient_to_edge = max(abs(center_uv.x), abs(center_uv.y));
		gradient_to_edge = gradient_to_edge * Distortion;
		gradient_to_edge = 1.0 - gradient_to_edge;
		vec2 rotaded_uv = rotate_uv(UV, vec2(0.5, 0.5), Rotation_deg, true);
		
		float remapped_position;
		{
			float output_range = Position_Max - Position_Min;
			remapped_position = Position_Min + output_range * Position;
		}
		
		// Adjust time using Start_Time, so the effect always starts from the first
		float active_time = TIME - Start_Time;
		if (active_time < 0.0) {
			active_time = 0.0;
		}
		
		float remapped_time = active_time * Speed + remapped_position;
		remapped_time = fract(remapped_time);
		{
			remapped_time = -2.0 + 4.0 * remapped_time;
		}
		
		vec2 offset_uv = vec2(rotaded_uv.xy) + vec2(remapped_time, 0.0);
		float line = vec3(offset_uv, 0.0).x;
		line = abs(line);
		line = gradient_to_edge * line;
		line = sqrt(line);
		
		float line_smoothness = clamp(Line_Smoothness, 0.001, 1.0);
		float offset_plus = Line_Width + line_smoothness;
		float offset_minus = Line_Width - line_smoothness;
		
		float remapped_line;
		{
			float input_range = offset_minus - offset_plus;
			remapped_line = (line - offset_plus) / input_range;
		}
		remapped_line *= Brightness;
		remapped_line = min(remapped_line, Alpha);
		
		vec4 surface_tex = texture(surface, UV);
		COLOR.rgba *= vec4(remapped_line) * surface_tex.a;
	}
}
"

[resource]
shader = SubResource("Shader_xnf2y")
shader_parameter/active = false
shader_parameter/Line_Smoothness = 0.045
shader_parameter/Line_Width = 0.09
shader_parameter/Brightness = 3.0
shader_parameter/Rotation_deg = 30.0
shader_parameter/Distortion = 1.8
shader_parameter/Speed = 0.7
shader_parameter/Position = 0.0
shader_parameter/Position_Min = 0.25
shader_parameter/Position_Max = 0.5
shader_parameter/Alpha = 1.0
shader_parameter/Start_Time = 0.0
