[gd_scene load_steps=28 format=4 uid="uid://xhtgkc2suxbe"]

[ext_resource type="PackedScene" uid="uid://diimhw6lk5yth" path="res://cell_spawner.tscn" id="1_t2xmo"]
[ext_resource type="Material" uid="uid://b475rxb2ihw5l" path="res://hueShader.tres" id="2_3ayql"]
[ext_resource type="Texture2D" uid="uid://63i4gcnvsn7h" path="res://icon.svg" id="3_ifosm"]
[ext_resource type="Theme" uid="uid://ccjkt4x566cc" path="res://Themes/OuterWilds.tres" id="4_1mvcq"]

[sub_resource type="TileSetScenesCollectionSource" id="TileSetScenesCollectionSource_qb3a6"]
scenes/1/scene = ExtResource("1_t2xmo")

[sub_resource type="TileSet" id="TileSet_hf2hk"]
tile_size = Vector2i(96, 96)
sources/0 = SubResource("TileSetScenesCollectionSource_qb3a6")

[sub_resource type="GDScript" id="GDScript_27xvk"]
script/source = "extends TileMapLayer

func get_available_directions(position : Vector2) -> Array:
	var tile_map_position = local_to_map(position) #convert the position given to tile map's position type
	
	#get the position of neighbors
	var left_neighbor = get_neighbor_cell(tile_map_position, TileSet.CELL_NEIGHBOR_LEFT_SIDE)
	var right_neighbor = get_neighbor_cell(tile_map_position, TileSet.CELL_NEIGHBOR_RIGHT_SIDE)
	var top_neighbor = get_neighbor_cell(tile_map_position, TileSet.CELL_NEIGHBOR_TOP_SIDE)
	var bottom_neighbor = get_neighbor_cell(tile_map_position, TileSet.CELL_NEIGHBOR_BOTTOM_SIDE)
	
	#check if there are tiles at the neighbor's position(-1 if none, 0 if yes)
	var left_id = get_cell_source_id(left_neighbor)
	var right_id = get_cell_source_id(right_neighbor)
	var top_id = get_cell_source_id(top_neighbor)
	var bottom_id = get_cell_source_id(bottom_neighbor)
	
	var neighbors = [left_id, right_id, top_id, bottom_id] #put the id of neighbors in the dictionary
	var directions = [Vector2(-1, 0), Vector2(1, 0), Vector2(0, -1), Vector2(0, 1)] #adjacent  directions, corresponds to: top, bottom, right, left, must match the neighbors dictionary
	var spawner_directions : Array[Vector2] #put here where the spawner will launch its cells when it pops
	for i in neighbors.size():
		if neighbors[i] != -1: #if it is not -1(neighbor doesn't exist)
			spawner_directions.append(directions[i])
	
	return spawner_directions#return the type of spawner based on how many no_neighbors_count
"

[sub_resource type="GDScript" id="GDScript_ukba4"]
script/source = "@tool
extends Control

@export_range(0, 1920, 320) var width: int :
	set(value):
		print(\"width: \", value)
		width = value
		size.x = width
@export_range(0, 1080, 180) var height: int :
	set(value):
		print(\"height: \", value)
		height = value
		size.y = height
@export var portrait_mode : bool :
	set(value):
		portrait_mode = value
		if portrait_mode:
			size = Vector2(height, width)
		else:
			size = Vector2(width, height)
"

[sub_resource type="GDScript" id="GDScript_gh0i5"]
resource_name = "player_display"
script/source = "@tool
extends AspectRatioContainer

@export var player1 : TextureRect
@export var player2 : TextureRect

@export var row_1 : HBoxContainer
@export var row_2 : HBoxContainer

func _ready() -> void:
	PlayerData.players.append(player1)
	PlayerData.players.append(player2)

func _on_h_slider_value_changed(value: float) -> void:
	while (value > PlayerData.players.size()): #if value is more than player count, add PlayerData.players to match the value
		var player1_instance = player1.duplicate() #get a copy of player 1
		player1_instance.name = \"Player \" + str(PlayerData.players.size() + 1)
		if PlayerData.players.size() < 6: #only 6 PlayerData.players can fit in a column
			row_1.add_child(player1_instance)
		else: #once there are more than 6 PlayerData.players, add them to the second row
			row_2.add_child(player1_instance)

		PlayerData.players.append(player1_instance) #add the duplicated player to the PlayerData.players array

	while (value < PlayerData.players.size()): #if value is less than player count, remove PlayerData.players to match the value
		PlayerData.players.pop_back().queue_free()
	
	for i in PlayerData.players.size(): #change the color depends on how many players
		player1.set_material(player1.get_material().duplicate(true)) #need to duplicate the material to avoid sharing shaders
		PlayerData.players[i].get_material().set_shader_parameter(\"Shift_Hue\", 1.0 / PlayerData.players.size() * i) #change hue shader


func _on_option_button_item_selected(index: int) -> void:
	index += 2 #+2 to account for the default players
	print(\"Players Amount: \", index)
	while  (index > PlayerData.players.size()): #if index value is more than player count, add PlayerData.players to match the index value
		var player1_instance = player1.duplicate() #get a copy of player 1
		player1_instance.name = \"Player \" + str(PlayerData.players.size() + 1)
		if PlayerData.players.size() < 6: #only 6 PlayerData.players can fit in a column
			row_1.add_child(player1_instance)
		else: #once there are more than 6 PlayerData.players, add them to the second row
			row_2.add_child(player1_instance)

		PlayerData.players.append(player1_instance) #add the duplicated player to the PlayerData.players array

	while  (index < PlayerData.players.size()): #if index value is less than player count, remove PlayerData.players to match the index value
		PlayerData.players.pop_back().queue_free()

	for i in PlayerData.players.size(): #change the color depends on how many players
		print(i)
		PlayerData.players[i].set_material(player1.get_material().duplicate(true)) #need to duplicate the material to avoid sharing shaders
		PlayerData.players[i].get_material().set_shader_parameter(\"Shift_Hue\", 1.0 / PlayerData.players.size() * i) #change hue shader
		#await  get_tree().create_timer(0.1).timeout
"

[sub_resource type="Shader" id="Shader_3jk7u"]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

/*
# Duplicate the shader so that changing its param doesn't change it on any other sprites that also use the shader.
# Generally done once in _ready()
$TheSprite.set_material($TheSprite.get_material().duplicate(true))

# Offset sprite hue by a random value within specified limits.
var rand_hue = float(randi() % 3)/2.0/3.2
$TheSprite.material.set_shader_param(\"Shift_Hue\", rand_hue)
*/
void fragment() {
// Input:3
	vec3 input_color;
	vec4 texture_color = texture(TEXTURE, UV);
	input_color = texture_color.rgb;

// VectorFunc:2
	vec3 color_hsv;
	{
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + Shift_Hue), 1.0f);

// VectorFunc:5
	vec3 color_rgb;
	{
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	texture_color = vec4(color_rgb.rgb,texture_color.a);
	COLOR.rgba = texture_color;

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_te5l3"]
resource_local_to_scene = true
shader = SubResource("Shader_3jk7u")
shader_parameter/Shift_Hue = 0.0

[sub_resource type="Gradient" id="Gradient_53t7f"]
offsets = PackedFloat32Array(0, 0.279221, 0.448052, 0.5, 0.577922, 1, 5)
colors = PackedColorArray(1, 0.788235, 0.203922, 1, 1, 0.670599, 0.159378, 1, 1, 0.282353, 0.14902, 1, 0, 0.589333, 0.68, 0.694118, 0.76, 0.74708, 0.7448, 0, 0.631373, 0.631373, 0.631373, 0, 0, 0, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_hohwn"]
gradient = SubResource("Gradient_53t7f")
fill = 1
fill_from = Vector2(0.5, 0.5)
fill_to = Vector2(0.1, 0.25)

[sub_resource type="GDScript" id="GDScript_1i8c1"]
resource_name = "player_icon"
script/source = "extends TextureRect
"

[sub_resource type="GDScript" id="GDScript_by5qy"]
resource_name = "player_name"
script/source = "extends RichTextLabel

func _ready() -> void:
	text = get_parent().name
"

[sub_resource type="GDScript" id="GDScript_ciegu"]
resource_name = "TitleScreen"
script/source = "@tool
extends Control

@export_range(0, 1920, 320) var width: int :
	set(value):
		print(\"width: \", value)
		width = value
		size.x = width
@export_range(0, 1080, 180) var height: int :
	set(value):
		print(\"height: \", value)
		height = value
		size.y = height
@export var portrait_mode : bool :
	set(value):
		portrait_mode = value
		if portrait_mode:
			size = Vector2(height, width)
		else:
			size = Vector2(width, height)
"

[sub_resource type="Shader" id="Shader_gj8ei"]
code = "shader_type canvas_item;

uniform float lod: hint_range(0.0, 5.0) = 5.0;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform float mix_percentage: hint_range(0.0, 1.0) = 0.3;

void fragment(){
	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV, lod);
	color = mix(color, vec4(0,0,0,1), mix_percentage);
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rfdrn"]
shader = SubResource("Shader_gj8ei")
shader_parameter/lod = 5.0
shader_parameter/mix_percentage = 0.3

[sub_resource type="GDScript" id="GDScript_qpbas"]
resource_name = "StartButton"
script/source = "extends Button


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass


func _on_pressed() -> void:
	%TitleScreen.visible = false
"

[sub_resource type="GDScript" id="GDScript_jhgu0"]
resource_name = "Players_Options"
script/source = "@tool
extends OptionButton

@export var amount: int :
	set(value):
		amount = value
		select(amount)
	
"

[sub_resource type="Shader" id="Shader_v2yx8"]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

/*
# Duplicate the shader so that changing its param doesn't change it on any other sprites that also use the shader.
# Generally done once in _ready()
$TheSprite.set_material($TheSprite.get_material().duplicate(true))

# Offset sprite hue by a random value within specified limits.
var rand_hue = float(randi() % 3)/2.0/3.2
$TheSprite.material.set_shader_param(\"Shift_Hue\", rand_hue)
*/
void fragment() {
// Input:3
	vec3 input_color;
	vec4 texture_color = texture(TEXTURE, UV);
	input_color = texture_color.rgb;

// VectorFunc:2
	vec3 color_hsv;
	{
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + Shift_Hue), 1.0f);

// VectorFunc:5
	vec3 color_rgb;
	{
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	texture_color = vec4(color_rgb.rgb,texture_color.a);
	COLOR.rgba = texture_color;

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_anmme"]
shader = SubResource("Shader_v2yx8")
shader_parameter/Shift_Hue = 0.0

[sub_resource type="Gradient" id="Gradient_0ivtn"]
colors = PackedColorArray(1, 0.717647, 0.176471, 1, 0.43, 0.07224, 0.0172, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_l8sjq"]
gradient = SubResource("Gradient_0ivtn")
fill_from = Vector2(0.5, 0)
fill_to = Vector2(0.5, 1)

[sub_resource type="GDScript" id="GDScript_v1lwo"]
script/source = "@tool
extends Control

@export_range(0, 1920, 320) var width: int :
	set(value):
		print(\"width: \", value)
		width = value
		size.x = width
@export_range(0, 1080, 180) var height: int :
	set(value):
		print(\"height: \", value)
		height = value
		size.y = height
@export var portrait_mode : bool :
	set(value):
		portrait_mode = value
		if portrait_mode:
			size = Vector2(height, width)
		else:
			size = Vector2(width, height)

func _ready() -> void:
	PlayerData.connect(\"player_change\", change_spawner_color) #connect to the Player_data signal on player_change change the spawner color

func change_spawner_color(): #change the color of the spawner
	set_material(PlayerData.players[PlayerData.current_player].get_material())
	#self_modulate.h = 1.0 / PlayerData.players.size() * PlayerData.current_player #change the border color by hue
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_cmf08"]
bg_color = Color(0.6, 0.6, 0.6, 0)
border_width_left = 6
border_width_top = 6
border_width_right = 6
border_width_bottom = 6
border_color = Color(0.72549, 0.321569, 0.0862745, 1)

[sub_resource type="GDScript" id="GDScript_jl880"]
resource_name = "BackgroundBorder"
script/source = "@tool
extends Control

@export_range(0, 1920, 320) var width: int :
	set(value):
		print(\"width: \", value)
		width = value
		size.x = width
@export_range(0, 1080, 180) var height: int :
	set(value):
		print(\"height: \", value)
		height = value
		size.y = height
@export var portrait_mode : bool :
	set(value):
		portrait_mode = value
		if portrait_mode:
			size = Vector2(height, width)
		else:
			size = Vector2(width, height)

func _ready() -> void:
	PlayerData.connect(\"player_change\", change_spawner_color) #connect to the Player_data signal on player_change change the spawner color

func change_spawner_color(): #change the color of the spawner
	self_modulate.h = 1.0 / PlayerData.players.size() * PlayerData.current_player #change the border color by hue
"

[node name="main" type="Node2D"]

[node name="SpawnersLayer" type="TileMapLayer" parent="."]
unique_name_in_owner = true
tile_map_data = PackedByteArray("AAABAAEAAAAAAAAAAQACAAEAAAAAAAAAAQADAAEAAAAAAAAAAQAEAAEAAAAAAAAAAQAFAAEAAAAAAAAAAQAGAAEAAAAAAAAAAQAHAAEAAAAAAAAAAQAIAAEAAAAAAAAAAQADAAQAAAAAAAAAAQACAAQAAAAAAAAAAQACAAMAAAAAAAAAAQACAAIAAAAAAAAAAQABAAMAAAAAAAAAAQABAAQAAAAAAAAAAQABAAIAAAAAAAAAAQADAAIAAAAAAAAAAQAEAAIAAAAAAAAAAQAFAAIAAAAAAAAAAQAGAAIAAAAAAAAAAQAHAAIAAAAAAAAAAQAIAAIAAAAAAAAAAQAIAAMAAAAAAAAAAQAIAAQAAAAAAAAAAQAHAAQAAAAAAAAAAQAGAAQAAAAAAAAAAQAFAAQAAAAAAAAAAQAEAAQAAAAAAAAAAQADAAMAAAAAAAAAAQAEAAMAAAAAAAAAAQAFAAMAAAAAAAAAAQAGAAMAAAAAAAAAAQAHAAMAAAAAAAAAAQA=")
tile_set = SubResource("TileSet_hf2hk")
script = SubResource("GDScript_27xvk")

[node name="UI" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 960.0
offset_bottom = 540.0
mouse_filter = 2
script = SubResource("GDScript_ukba4")
width = 960
height = 540

[node name="Player_Display" type="AspectRatioContainer" parent="UI" node_paths=PackedStringArray("player1", "player2", "row_1", "row_2")]
layout_mode = 2
offset_left = 320.0
offset_right = 640.0
offset_bottom = 48.0
grow_horizontal = 2
script = SubResource("GDScript_gh0i5")
player1 = NodePath("VBoxContainer/Row1/Player 1")
player2 = NodePath("VBoxContainer/Row1/Player 2")
row_1 = NodePath("VBoxContainer/Row1")
row_2 = NodePath("VBoxContainer/Row2")

[node name="VBoxContainer" type="VBoxContainer" parent="UI/Player_Display"]
layout_mode = 2
theme_override_constants/separation = -16

[node name="Row1" type="HBoxContainer" parent="UI/Player_Display/VBoxContainer"]
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
theme_override_constants/separation = 0
alignment = 2

[node name="Player 1" type="TextureRect" parent="UI/Player_Display/VBoxContainer/Row1"]
material = SubResource("ShaderMaterial_te5l3")
layout_mode = 2
texture = SubResource("GradientTexture2D_hohwn")
script = SubResource("GDScript_1i8c1")

[node name="player_name" type="RichTextLabel" parent="UI/Player_Display/VBoxContainer/Row1/Player 1"]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -23.5
offset_right = 23.5
offset_bottom = 40.0
grow_horizontal = 2
theme_override_font_sizes/normal_font_size = 12
text = "Player 1"
fit_content = true
autowrap_mode = 0
script = SubResource("GDScript_by5qy")

[node name="Player 2" type="TextureRect" parent="UI/Player_Display/VBoxContainer/Row1"]
material = ExtResource("2_3ayql")
layout_mode = 2
texture = SubResource("GradientTexture2D_hohwn")
script = SubResource("GDScript_1i8c1")

[node name="player_name" type="RichTextLabel" parent="UI/Player_Display/VBoxContainer/Row1/Player 2"]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -23.5
offset_right = 23.5
offset_bottom = 40.0
grow_horizontal = 2
theme_override_font_sizes/normal_font_size = 12
text = "Player 1"
fit_content = true
autowrap_mode = 0
script = SubResource("GDScript_by5qy")

[node name="Row2" type="HBoxContainer" parent="UI/Player_Display/VBoxContainer"]
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
theme_override_constants/separation = 0
alignment = 2

[node name="TitleScreen" type="Control" parent="."]
unique_name_in_owner = true
layout_mode = 3
anchors_preset = 0
offset_right = 960.0
offset_bottom = 540.0
script = SubResource("GDScript_ciegu")
width = 960
height = 540

[node name="LOD" type="TextureRect" parent="TitleScreen"]
visible = false
material = SubResource("ShaderMaterial_rfdrn")
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("3_ifosm")

[node name="PanelContainer" type="PanelContainer" parent="TitleScreen"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -160.0
offset_top = -270.0
offset_right = 160.0
offset_bottom = 270.0
grow_horizontal = 2
grow_vertical = 2
theme = ExtResource("4_1mvcq")

[node name="CenterContainer" type="CenterContainer" parent="TitleScreen/PanelContainer"]
layout_mode = 2

[node name="VBoxContainer" type="VBoxContainer" parent="TitleScreen/PanelContainer/CenterContainer"]
layout_mode = 2
theme_override_constants/separation = 12

[node name="Title" type="RichTextLabel" parent="TitleScreen/PanelContainer/CenterContainer/VBoxContainer"]
layout_mode = 2
bbcode_enabled = true
text = "

[center]Chain Reaction : Expanded





"
fit_content = true

[node name="Start" type="Button" parent="TitleScreen/PanelContainer/CenterContainer/VBoxContainer"]
layout_mode = 2
text = "Start
"
script = SubResource("GDScript_qpbas")

[node name="Player_Count" type="HBoxContainer" parent="TitleScreen/PanelContainer/CenterContainer/VBoxContainer"]
layout_mode = 2

[node name="RichTextLabel" type="RichTextLabel" parent="TitleScreen/PanelContainer/CenterContainer/VBoxContainer/Player_Count"]
layout_mode = 2
bbcode_enabled = true
text = "Players : "
fit_content = true
autowrap_mode = 0

[node name="Amount" type="OptionButton" parent="TitleScreen/PanelContainer/CenterContainer/VBoxContainer/Player_Count"]
layout_mode = 2
size_flags_horizontal = 3
selected = 0
item_count = 11
popup/item_0/text = "2"
popup/item_0/id = 1
popup/item_1/text = "3"
popup/item_1/id = 2
popup/item_2/text = "4"
popup/item_2/id = 3
popup/item_3/text = "5"
popup/item_3/id = 4
popup/item_4/text = "6"
popup/item_4/id = 5
popup/item_5/text = "7"
popup/item_5/id = 6
popup/item_6/text = "8"
popup/item_6/id = 7
popup/item_7/text = "9"
popup/item_7/id = 8
popup/item_8/text = "10"
popup/item_8/id = 9
popup/item_9/text = "11"
popup/item_9/id = 10
popup/item_10/text = "12"
popup/item_10/id = 11
script = SubResource("GDScript_jhgu0")

[node name="Background" type="CanvasLayer" parent="."]
layer = -1

[node name="BackgroundColor" type="TextureRect" parent="Background"]
material = SubResource("ShaderMaterial_anmme")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -480.0
offset_top = -270.0
offset_right = 480.0
offset_bottom = 270.0
grow_horizontal = 2
grow_vertical = 2
texture = SubResource("GradientTexture2D_l8sjq")
script = SubResource("GDScript_v1lwo")
width = 960
height = 540

[node name="BackgroundBorder" type="Panel" parent="Background"]
self_modulate = Color(1, 0.7575, 0.03, 1)
offset_right = 960.0
offset_bottom = 540.0
theme_override_styles/panel = SubResource("StyleBoxFlat_cmf08")
script = SubResource("GDScript_jl880")
width = 960
height = 540

[connection signal="pressed" from="SpawnersLayer/Cell_spawner" to="SpawnersLayer/Cell_spawner" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17360" to="SpawnersLayer/@Button@17360" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17361" to="SpawnersLayer/@Button@17361" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17362" to="SpawnersLayer/@Button@17362" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17363" to="SpawnersLayer/@Button@17363" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17364" to="SpawnersLayer/@Button@17364" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17365" to="SpawnersLayer/@Button@17365" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17366" to="SpawnersLayer/@Button@17366" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17367" to="SpawnersLayer/@Button@17367" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17368" to="SpawnersLayer/@Button@17368" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17369" to="SpawnersLayer/@Button@17369" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17370" to="SpawnersLayer/@Button@17370" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17371" to="SpawnersLayer/@Button@17371" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17372" to="SpawnersLayer/@Button@17372" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17373" to="SpawnersLayer/@Button@17373" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17374" to="SpawnersLayer/@Button@17374" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17375" to="SpawnersLayer/@Button@17375" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17376" to="SpawnersLayer/@Button@17376" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17377" to="SpawnersLayer/@Button@17377" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17378" to="SpawnersLayer/@Button@17378" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17379" to="SpawnersLayer/@Button@17379" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17380" to="SpawnersLayer/@Button@17380" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17381" to="SpawnersLayer/@Button@17381" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17382" to="SpawnersLayer/@Button@17382" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17383" to="SpawnersLayer/@Button@17383" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17384" to="SpawnersLayer/@Button@17384" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17385" to="SpawnersLayer/@Button@17385" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17386" to="SpawnersLayer/@Button@17386" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17387" to="SpawnersLayer/@Button@17387" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17388" to="SpawnersLayer/@Button@17388" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17389" to="SpawnersLayer/@Button@17389" method="_on_pressed"]
[connection signal="pressed" from="SpawnersLayer/@Button@17390" to="SpawnersLayer/@Button@17390" method="_on_pressed"]
[connection signal="pressed" from="TitleScreen/PanelContainer/CenterContainer/VBoxContainer/Start" to="TitleScreen/PanelContainer/CenterContainer/VBoxContainer/Start" method="_on_pressed"]
[connection signal="item_selected" from="TitleScreen/PanelContainer/CenterContainer/VBoxContainer/Player_Count/Amount" to="UI/Player_Display" method="_on_option_button_item_selected"]
