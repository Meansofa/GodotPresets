[gd_scene load_steps=13 format=4 uid="uid://xhtgkc2suxbe"]

[ext_resource type="PackedScene" uid="uid://diimhw6lk5yth" path="res://cell_spawner.tscn" id="1_t2xmo"]
[ext_resource type="Material" uid="uid://b475rxb2ihw5l" path="res://hueShader.tres" id="2_3ayql"]

[sub_resource type="TileSetScenesCollectionSource" id="TileSetScenesCollectionSource_qb3a6"]
scenes/1/scene = ExtResource("1_t2xmo")

[sub_resource type="TileSet" id="TileSet_hf2hk"]
tile_size = Vector2i(96, 96)
sources/0 = SubResource("TileSetScenesCollectionSource_qb3a6")

[sub_resource type="GDScript" id="GDScript_ukba4"]
script/source = "@tool
extends Control

@export_range(0, 1920, 320) var width: int :
	set(value):
		print(\"width: \", value)
		width = value
		size.x = width
@export_range(0, 1080, 180) var height: int :
	set(value):
		print(\"height: \", value)
		height = value
		size.y = height
@export var portrait_mode : bool :
	set(value):
		portrait_mode = value
		if portrait_mode:
			size = Vector2(height, width)
		else:
			size = Vector2(width, height)
"

[sub_resource type="GDScript" id="GDScript_6yv3i"]
resource_name = "player_count"
script/source = "extends RichTextLabel


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass


func _on_h_slider_value_changed(value: float) -> void:
	text = \"Players\\t:\\t\" + str(value)
"

[sub_resource type="GDScript" id="GDScript_gh0i5"]
resource_name = "player_display"
script/source = "@tool
extends AspectRatioContainer

@export var player1 : TextureRect
@export var player2 : TextureRect

@export var row_1 : HBoxContainer
@export var row_2 : HBoxContainer

func _ready() -> void:
	PlayerData.players.append(player1)
	PlayerData.players.append(player2)


func _on_h_slider_value_changed(value: float) -> void:
	while (value > PlayerData.players.size()): #if value is more than player count, add PlayerData.players to match the value
		var player1_instance = player1.duplicate() #get a copy of player 1
		if PlayerData.players.size() < 6: #only 6 PlayerData.players can fit in a column
			row_1.add_child(player1_instance)
		else: #once there are more than 6 PlayerData.players, add them to the second row
			row_2.add_child(player1_instance)

		PlayerData.players.append(player1_instance) #add the duplicated player to the PlayerData.players array

	while (value < PlayerData.players.size()): #if value is less than player count, remove PlayerData.players to match the value
		PlayerData.players.pop_back().queue_free()
	
	for i in PlayerData.players.size():
		player1.set_material(player1.get_material().duplicate(true)) #need to duplicate the material to avoid sharing shaders
		PlayerData.players[i].get_material().set_shader_parameter(\"Shift_Hue\", 1.0 / PlayerData.players.size() * i) #change hue shader
"

[sub_resource type="Shader" id="Shader_3jk7u"]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

/*
# Duplicate the shader so that changing its param doesn't change it on any other sprites that also use the shader.
# Generally done once in _ready()
$TheSprite.set_material($TheSprite.get_material().duplicate(true))

# Offset sprite hue by a random value within specified limits.
var rand_hue = float(randi() % 3)/2.0/3.2
$TheSprite.material.set_shader_param(\"Shift_Hue\", rand_hue)
*/
void fragment() {
// Input:3
	vec3 input_color;
	vec4 texture_color = texture(TEXTURE, UV);
	input_color = texture_color.rgb;

// VectorFunc:2
	vec3 color_hsv;
	{
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + Shift_Hue), 1.0f);

// VectorFunc:5
	vec3 color_rgb;
	{
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	texture_color = vec4(color_rgb.rgb,texture_color.a);
	COLOR.rgba = texture_color;

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_te5l3"]
resource_local_to_scene = true
shader = SubResource("Shader_3jk7u")
shader_parameter/Shift_Hue = 0.0

[sub_resource type="Gradient" id="Gradient_53t7f"]
offsets = PackedFloat32Array(0, 0.279221, 0.448052, 0.5, 1, 5)
colors = PackedColorArray(1, 0.788235, 0.203922, 1, 1, 0.670599, 0.159378, 1, 1, 0.282353, 0.14902, 1, 0.678431, 0.678431, 0.678431, 0, 0.631373, 0.631373, 0.631373, 0, 0, 0, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_hohwn"]
gradient = SubResource("Gradient_53t7f")
fill = 1
fill_from = Vector2(0.5, 0.5)
fill_to = Vector2(0.1, 0.25)

[sub_resource type="GDScript" id="GDScript_1i8c1"]
resource_name = "player_icon"
script/source = "extends TextureRect
"

[node name="main" type="Node2D"]

[node name="TileMapLayer" type="TileMapLayer" parent="."]
tile_map_data = PackedByteArray("AAABAAEAAAAAAAAAAQACAAEAAAAAAAAAAQADAAEAAAAAAAAAAQAEAAEAAAAAAAAAAQAFAAEAAAAAAAAAAQAGAAEAAAAAAAAAAQAHAAEAAAAAAAAAAQAIAAEAAAAAAAAAAQADAAQAAAAAAAAAAQACAAQAAAAAAAAAAQACAAMAAAAAAAAAAQACAAIAAAAAAAAAAQABAAMAAAAAAAAAAQABAAQAAAAAAAAAAQABAAIAAAAAAAAAAQADAAIAAAAAAAAAAQAEAAIAAAAAAAAAAQAFAAIAAAAAAAAAAQAGAAIAAAAAAAAAAQAHAAIAAAAAAAAAAQAIAAIAAAAAAAAAAQAIAAMAAAAAAAAAAQAIAAQAAAAAAAAAAQAHAAQAAAAAAAAAAQAGAAQAAAAAAAAAAQAFAAQAAAAAAAAAAQAEAAQAAAAAAAAAAQADAAMAAAAAAAAAAQAEAAMAAAAAAAAAAQAFAAMAAAAAAAAAAQAGAAMAAAAAAAAAAQAHAAMAAAAAAAAAAQA=")
tile_set = SubResource("TileSet_hf2hk")

[node name="Control" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 960.0
offset_bottom = 540.0
mouse_filter = 2
script = SubResource("GDScript_ukba4")
width = 960
height = 540

[node name="PanelContainer" type="PanelContainer" parent="Control"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -160.0
offset_top = -21.5
offset_right = 160.0
offset_bottom = 21.5
grow_horizontal = 2
grow_vertical = 2

[node name="AspectRatioContainer" type="AspectRatioContainer" parent="Control/PanelContainer"]
layout_mode = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Control/PanelContainer/AspectRatioContainer"]
layout_mode = 2

[node name="Player Count" type="RichTextLabel" parent="Control/PanelContainer/AspectRatioContainer/VBoxContainer"]
layout_mode = 2
bbcode_enabled = true
text = "Players	:	2"
fit_content = true
script = SubResource("GDScript_6yv3i")

[node name="HSlider" type="HSlider" parent="Control/PanelContainer/AspectRatioContainer/VBoxContainer"]
custom_minimum_size = Vector2(320, 0)
layout_mode = 2
min_value = 2.0
max_value = 12.0
value = 2.0

[node name="Player_Display" type="AspectRatioContainer" parent="Control" node_paths=PackedStringArray("player1", "player2", "row_1", "row_2")]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -347.0
offset_right = 347.0
offset_bottom = 40.0
grow_horizontal = 2
script = SubResource("GDScript_gh0i5")
player1 = NodePath("VBoxContainer/Row1/player1")
player2 = NodePath("VBoxContainer/Row1/player2")
row_1 = NodePath("VBoxContainer/Row1")
row_2 = NodePath("VBoxContainer/Row2")

[node name="VBoxContainer" type="VBoxContainer" parent="Control/Player_Display"]
layout_mode = 2
theme_override_constants/separation = -16

[node name="Row1" type="HBoxContainer" parent="Control/Player_Display/VBoxContainer"]
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
theme_override_constants/separation = 0
alignment = 2

[node name="player1" type="TextureRect" parent="Control/Player_Display/VBoxContainer/Row1"]
material = SubResource("ShaderMaterial_te5l3")
layout_mode = 2
texture = SubResource("GradientTexture2D_hohwn")
script = SubResource("GDScript_1i8c1")

[node name="RichTextLabel" type="RichTextLabel" parent="Control/Player_Display/VBoxContainer/Row1/player1"]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -23.5
offset_right = 23.5
offset_bottom = 40.0
grow_horizontal = 2
theme_override_font_sizes/normal_font_size = 12
text = "Player 1"
fit_content = true
autowrap_mode = 0

[node name="player2" type="TextureRect" parent="Control/Player_Display/VBoxContainer/Row1"]
material = ExtResource("2_3ayql")
layout_mode = 2
texture = SubResource("GradientTexture2D_hohwn")
script = SubResource("GDScript_1i8c1")

[node name="RichTextLabel" type="RichTextLabel" parent="Control/Player_Display/VBoxContainer/Row1/player2"]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -23.5
offset_right = 23.5
offset_bottom = 40.0
grow_horizontal = 2
theme_override_font_sizes/normal_font_size = 12
text = "Player 1"
fit_content = true
autowrap_mode = 0

[node name="Row2" type="HBoxContainer" parent="Control/Player_Display/VBoxContainer"]
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
theme_override_constants/separation = 0
alignment = 2

[connection signal="value_changed" from="Control/PanelContainer/AspectRatioContainer/VBoxContainer/HSlider" to="Control/PanelContainer/AspectRatioContainer/VBoxContainer/Player Count" method="_on_h_slider_value_changed"]
[connection signal="value_changed" from="Control/PanelContainer/AspectRatioContainer/VBoxContainer/HSlider" to="Control/Player_Display" method="_on_h_slider_value_changed"]
